{
    "containing": {
        "name": "containing",
        "body": "containing",
        "description": "\n(no documented parameters)",
        "prefix": "~containing"
    },
    "containingall": {
        "name": "containingall",
        "body": "containingall",
        "description": "\n(no documented parameters)",
        "prefix": "~containingall"
    },
    "defined": {
        "name": "defined",
        "body": "{% if variable is defined %}\n<!--code to render if variable is defined-->\n{% endif %}",
        "description": "Return true if the variable is defined\n(no documented parameters)",
        "prefix": "~defined"
    },
    "divisibleby": {
        "name": "divisibleby",
        "body": "{% if variable is divisbleby 5 %}\n   <!--code to render if variable can be divided by 5-->\n{% else %}\n   <!--code to render if variable cannot be divided by 5-->\n{% endif %}",
        "description": "Check if a variable is divisible by a number\n Available Parameters: \n\t- num(number): The number to check whether a number is divisble by",
        "prefix": "~divisibleby"
    },
    "equalto": {
        "name": "equalto",
        "body": "{% if foo.expression is equalto 42 %}\n    the foo attribute evaluates to the constant 42\n{% endif %}\n",
        "description": "Check if an object has the same value as another object\n Available Parameters: \n\t- other(object): Another object to check equality against",
        "prefix": "~equalto"
    },
    "even": {
        "name": "even",
        "body": "{% if variable is even %}\n   <!--code to render if variable is an even number-->\n{% else %}\n   <!--code to render if variable is an odd number-->\n{% endif %}",
        "description": "Return true if the value is even\n(no documented parameters)",
        "prefix": "~even"
    },
    "iterable": {
        "name": "iterable",
        "body": "{% if variable is iterable %}\n       <!--code to render if items in a variable can be iterated through-->\n{% endif %}",
        "description": "Return true if the object is iterable (sequence, dict, etc)\n(no documented parameters)",
        "prefix": "~iterable"
    },
    "lower": {
        "name": "lower",
        "body": "{% if variable is lower %}\n   <!--code to render if variable value is lowercased-->\n{% endif %}",
        "description": "Return true if the given string is all lowercased\n(no documented parameters)",
        "prefix": "~lower"
    },
    "mapping": {
        "name": "mapping",
        "body": "{% if variable is mapping %}\n     <!--code to render when object is a dict-->\n{% endif %}",
        "description": "Return true if the given object is a dict\n(no documented parameters)",
        "prefix": "~mapping"
    },
    "none": {
        "name": "none",
        "body": "{% unless variable is none %}\n     <!--code to render unless the variable is null-->\n{% endunless %}",
        "description": "Return true if the given object is null / none\n(no documented parameters)",
        "prefix": "~none"
    },
    "number": {
        "name": "number",
        "body": "{% if variable is number %}\n       {{ my_var * 1000000 }}\n{% else %}\n       The variable is not a number.\n{% endif %}",
        "description": "Return true if the object is a number\n(no documented parameters)",
        "prefix": "~number"
    },
    "odd": {
        "name": "odd",
        "body": "{% if variable is odd %}\n   <!--code to render if variable is an odd number-->\n{% else %}\n   <!--code to render if variable is an even number-->\n{% endif %}",
        "description": "Return true if the object is an odd number\n(no documented parameters)",
        "prefix": "~odd"
    },
    "sameas": {
        "name": "sameas",
        "body": "{% if var_one is sameas var_two %}\n    <!--code to render if variables have the same value as one another-->\n{% endif %}",
        "description": "Return true if variable is pointing at same object as other variable\n Available Parameters: \n\t- other(object): A second object to check the variables value against",
        "prefix": "~sameas"
    },
    "sequence": {
        "name": "sequence",
        "body": "{% if variable is sequence %}\n      <!--code to render if items in a variable is a sequence-->\n{% endif %}",
        "description": "Return true if the variable is a sequence. Sequences are variables that are iterable.\n(no documented parameters)",
        "prefix": "~sequence"
    },
    "string": {
        "name": "string",
        "body": "{% if variable is string %}\n      <!--code to render if a variable contains a string value-->\n{% endif %}",
        "description": "Return true if object is a string\n(no documented parameters)",
        "prefix": "~string"
    },
    "string_containing": {
        "name": "string_containing",
        "body": "{% if variable is string_containing 'foo' %}\n      <!--code to render if variable contains 'foo' -->\n{% endif %}",
        "description": "Return true if object is a string which contains a specified other string\n(no documented parameters)",
        "prefix": "~string_containing"
    },
    "string_startingwith": {
        "name": "string_startingwith",
        "body": "{% if variable is string_startingwith 'foo' %}\n      <!--code to render if variable starts with 'foo'-->\n{% endif %}",
        "description": "Return true if object is a string which starts with a specified other string\n(no documented parameters)",
        "prefix": "~string_startingwith"
    },
    "truthy": {
        "name": "truthy",
        "body": "{% if variable is truthy %}\n      <!--code to render a  boolean variable is True-->\n{% endif %}",
        "description": "Return true if object is 'truthy'\n(no documented parameters)",
        "prefix": "~truthy"
    },
    "undefined": {
        "name": "undefined",
        "body": "{% if variable is undefined %}\n      <!--code to render if variable is undefined-->\n{% endif %}",
        "description": "Return true if object is undefined\n(no documented parameters)",
        "prefix": "~undefined"
    },
    "upper": {
        "name": "upper",
        "body": "{% if variable is upper %}\n    <!-- code to render if variable value is uppercased -->\n{% endif %}",
        "description": "Return true if string is all uppercased\n(no documented parameters)",
        "prefix": "~upper"
    },
    "within": {
        "name": "within",
        "body": "within",
        "description": "\n(no documented parameters)",
        "prefix": "~within"
    }
}