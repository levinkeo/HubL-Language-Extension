{
    "abs": {
        "name": "abs",
        "body": "abs(${number})",
        "description": "Return the absolute value of the argument.",
        "prefix": "|abs"
    },
    "add": {
        "name": "add",
        "body": "add(${number}, ${addend})",
        "description": "adds a number to the existing value",
        "prefix": "|add"
    },
    "attr": {
        "name": "attr",
        "body": "attr(${obj}, ${name})",
        "description": "Renders the attribute of a dictionary",
        "prefix": "|attr"
    },
    "batch": {
        "name": "batch",
        "body": "{% batch \"batch\" (${value}, ${linecount}, ${fill_with}) %}\n\t\n\n{% endbatch%} ",
        "description": "A filter that groups up items within a sequence",
        "prefix": "|batch"
    },
    "between_times": {
        "name": "between_times",
        "body": "between_times(${begin}, ${end}, ${unit})",
        "description": "Calculates the time between two datetime objects",
        "prefix": "|between_times"
    },
    "bool": {
        "name": "bool",
        "body": "{% bool \"bool\" (${value}) %}\n\t\n\n{% endbool%} ",
        "description": "Convert value into a boolean.",
        "prefix": "|bool"
    },
    "capitalize": {
        "name": "capitalize",
        "body": "capitalize(${string})",
        "description": "Capitalize a value. The first character will be uppercase, all others lowercase.",
        "prefix": "|capitalize"
    },
    "center": {
        "name": "center",
        "body": "center(${value}, ${width})",
        "description": "Uses whitespace to center the value in a field of a given width.",
        "prefix": "|center"
    },
    "convert_rgb": {
        "name": "convert_rgb",
        "body": "convert_rgb",
        "description": "Converts a color given as a hex string into a comma-separated list of RGB values.",
        "prefix": "|convert_rgb"
    },
    "count": {
        "name": "count",
        "body": "count",
        "description": "",
        "prefix": "|count"
    },
    "cut": {
        "name": "cut",
        "body": "cut(${value}, ${to_remove})",
        "description": "Removes a string from the value from another string",
        "prefix": "|cut"
    },
    "d": {
        "name": "d",
        "body": "d",
        "description": "",
        "prefix": "|d"
    },
    "date": {
        "name": "date",
        "body": "date",
        "description": "",
        "prefix": "|date"
    },
    "datetimeformat": {
        "name": "datetimeformat",
        "body": "datetimeformat(${value}, ${format}, ${timezone})",
        "description": "Formats a date object",
        "prefix": "|datetimeformat"
    },
    "default": {
        "name": "default",
        "body": "default(${value}, ${default_value}, ${boolean})",
        "description": "If the value is undefined it will return the passed default value, otherwise the value of the variable",
        "prefix": "|default"
    },
    "dictsort": {
        "name": "dictsort",
        "body": "{% dictsort \"dictsort\" (${value}, ${case_sensitive}, ${by}) %}\n\t\n\n{% enddictsort%} ",
        "description": "Sort a dict and yield (key, value) pairs.",
        "prefix": "|dictsort"
    },
    "difference": {
        "name": "difference",
        "body": "difference(${value}, ${list})",
        "description": "Returns a list containing elements present in the first list but not the second list",
        "prefix": "|difference"
    },
    "divide": {
        "name": "divide",
        "body": "divide(${value}, ${divisor})",
        "description": "Divides the current value by a divisor",
        "prefix": "|divide"
    },
    "divisible": {
        "name": "divisible",
        "body": "{% divisible \"divisible\" (${value}, ${divisor}) %}\n\t\n\n{% enddivisible%} ",
        "description": "Evaluates to true if the value is divisible by the given number",
        "prefix": "|divisible"
    },
    "e": {
        "name": "e",
        "body": "e",
        "description": "",
        "prefix": "|e"
    },
    "escape": {
        "name": "escape",
        "body": "escape(${s})",
        "description": "Converts the characters &, <, >, ‘, and ” in string s to HTML-safe sequences. Use this filter if you need to display text that might contain such characters in HTML. Marks return value as markup string.",
        "prefix": "|escape"
    },
    "escape_jinjava": {
        "name": "escape_jinjava",
        "body": "escape_jinjava(${s})",
        "description": "Converts the characters { and } in string s to Jinjava-safe sequences. Use this filter if you need to display text that might contain such characters in Jinjava. Marks return value as markup string.",
        "prefix": "|escape_jinjava"
    },
    "escapejs": {
        "name": "escapejs",
        "body": "escapejs(${s})",
        "description": "Escapes strings so that they can be safely inserted into a JavaScript variable declaration",
        "prefix": "|escapejs"
    },
    "escapejson": {
        "name": "escapejson",
        "body": "escapejson(${s})",
        "description": "Escapes strings so that they can be used as JSON values",
        "prefix": "|escapejson"
    },
    "filesizeformat": {
        "name": "filesizeformat",
        "body": "filesizeformat(${value}, ${binary})",
        "description": "Format the value like a ‘human-readable’ file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc).",
        "prefix": "|filesizeformat"
    },
    "first": {
        "name": "first",
        "body": "first(${seq})",
        "description": "Return the first item of a sequence.",
        "prefix": "|first"
    },
    "float": {
        "name": "float",
        "body": "float(${value}, ${default})",
        "description": "Convert the value into a floating point number.",
        "prefix": "|float"
    },
    "forceescape": {
        "name": "forceescape",
        "body": "forceescape(${value})",
        "description": "Enforce HTML escaping. This will probably double escape variables.",
        "prefix": "|forceescape"
    },
    "format": {
        "name": "format",
        "body": "format(${value}, ${args})",
        "description": "Apply Python string formatting to an object.",
        "prefix": "|format"
    },
    "fromjson": {
        "name": "fromjson",
        "body": "fromjson(${s})",
        "description": "Converts JSON string to Object",
        "prefix": "|fromjson"
    },
    "geo_distance": {
        "name": "geo_distance",
        "body": "geo_distance(${point1}, ${point2_lat}, ${point2_long}, ${units})",
        "description": "Calculates the ellipsoidal 2D distance between two points on Earth",
        "prefix": "|geo_distance"
    },
    "groupby": {
        "name": "groupby",
        "body": "{% groupby \"groupby\" (${value}, ${attribute}) %}\n\t\n\n{% endgroupby%} ",
        "description": "Group a sequence of objects by a common attribute.",
        "prefix": "|groupby"
    },
    "indent": {
        "name": "indent",
        "body": "indent(${s}, ${width}, ${indentfirst})",
        "description": "Uses whitespace to indent a string.",
        "prefix": "|indent"
    },
    "int": {
        "name": "int",
        "body": "int(${value}, ${default})",
        "description": "Convert the value into an integer.",
        "prefix": "|int"
    },
    "intersect": {
        "name": "intersect",
        "body": "intersect(${value}, ${list})",
        "description": "Returns a list containing elements present in both lists",
        "prefix": "|intersect"
    },
    "ipaddr": {
        "name": "ipaddr",
        "body": "{% ipaddr \"ipaddr\" (${value}, ${function}) %}\n\t\n\n{% endipaddr%} ",
        "description": "Evaluates to true if the value is a valid IPv4 or IPv6 address",
        "prefix": "|ipaddr"
    },
    "join": {
        "name": "join",
        "body": "join(${value}, ${d}, ${attr})",
        "description": "Return a string which is the concatenation of the strings in the sequence.",
        "prefix": "|join"
    },
    "last": {
        "name": "last",
        "body": "last(${seq})",
        "description": "Return the last item of a sequence",
        "prefix": "|last"
    },
    "length": {
        "name": "length",
        "body": "length(${object})",
        "description": "Return the number of items of a sequence or mapping",
        "prefix": "|length"
    },
    "list": {
        "name": "list",
        "body": "list(${value})",
        "description": "Convert the value into a list. If it was a string the returned list will be a list of characters.",
        "prefix": "|list"
    },
    "lower": {
        "name": "lower",
        "body": "lower(${s})",
        "description": "Convert a value to lowercase",
        "prefix": "|lower"
    },
    "map": {
        "name": "map",
        "body": "map(${value}, ${attribute})",
        "description": "Applies a filter on a sequence of objects or looks up an attribute.",
        "prefix": "|map"
    },
    "md5": {
        "name": "md5",
        "body": "md5(${value})",
        "description": "Calculates the md5 hash of the given object",
        "prefix": "|md5"
    },
    "minus_time": {
        "name": "minus_time",
        "body": "minus_time(${var}, ${diff}, ${unit})",
        "description": "Subtracts a specified amount of time to a datetime object",
        "prefix": "|minus_time"
    },
    "multiply": {
        "name": "multiply",
        "body": "multiply(${value}, ${multiplier})",
        "description": "Multiplies the current object with the given multiplier",
        "prefix": "|multiply"
    },
    "plus_time": {
        "name": "plus_time",
        "body": "plus_time(${var}, ${diff}, ${unit})",
        "description": "Adds a specified amount of time to a datetime object",
        "prefix": "|plus_time"
    },
    "pprint": {
        "name": "pprint",
        "body": "pprint(${value})",
        "description": "Pretty print a variable. Useful for debugging.",
        "prefix": "|pprint"
    },
    "random": {
        "name": "random",
        "body": "{% random \"random\" (${seq}) %}\n\t\n\n{% endrandom%} ",
        "description": "Return a random item from the sequence.",
        "prefix": "|random"
    },
    "regex_replace": {
        "name": "regex_replace",
        "body": "regex_replace(${s}, ${regex}, ${new})",
        "description": "Return a copy of the value with all occurrences of a matched regular expression (Java RE2 syntax) replaced with a new one. The first argument is the regular expression to be matched, the second is the replacement string",
        "prefix": "|regex_replace"
    },
    "reject": {
        "name": "reject",
        "body": "reject(${seq}, ${exp_test})",
        "description": "Filters a sequence of objects by applying a test to the object and rejecting the ones with the test succeeding.",
        "prefix": "|reject"
    },
    "rejectattr": {
        "name": "rejectattr",
        "body": "{% rejectattr \"rejectattr\" (${seq}, ${attribute}, ${exp_test}) %}\n\t\n\n{% endrejectattr%} ",
        "description": "Filters a sequence of objects by applying a test to an attribute of an object or the attribute and rejecting the ones with the test succeeding.",
        "prefix": "|rejectattr"
    },
    "replace": {
        "name": "replace",
        "body": "replace(${s}, ${old}, ${new}, ${count})",
        "description": "Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced",
        "prefix": "|replace"
    },
    "reverse": {
        "name": "reverse",
        "body": "{% reverse \"reverse\" (${value}) %}\n\t\n\n{% endreverse%} ",
        "description": "Reverse the object or return an iterator the iterates over it the other way round.",
        "prefix": "|reverse"
    },
    "round": {
        "name": "round",
        "body": "round(${value}, ${precision}, ${method})",
        "description": "Round the number to a given precision.",
        "prefix": "|round"
    },
    "safe": {
        "name": "safe",
        "body": "safefalse",
        "description": "Mark the value as safe, which means that in an environment with automatic escaping enabled this variable will not be escaped.",
        "prefix": "|safe"
    },
    "select": {
        "name": "select",
        "body": "select(${value}, ${exp_test})",
        "description": "Filters a sequence of objects by applying a test to the object and only selecting the ones with the test succeeding.",
        "prefix": "|select"
    },
    "selectattr": {
        "name": "selectattr",
        "body": "{% selectattr \"selectattr\" (${sequence}, ${attr}, ${exp_test}) %}\n\t\n\n{% endselectattr%} ",
        "description": "Filters a sequence of objects by applying a test to an attribute of an object and only selecting the ones with the test succeeding.",
        "prefix": "|selectattr"
    },
    "shuffle": {
        "name": "shuffle",
        "body": "{% shuffle \"shuffle\" false %}\n\t\n\n{% endshuffle%} ",
        "description": "Randomly shuffle a given list, returning a new list with all of the items of the original list in a random order",
        "prefix": "|shuffle"
    },
    "slice": {
        "name": "slice",
        "body": "{% slice \"slice\" (${value}, ${slices}, ${fill_with}) %}\n\t\n\n{% endslice%} ",
        "description": "Slice an iterator and return a list of lists containing those items.",
        "prefix": "|slice"
    },
    "sort": {
        "name": "sort",
        "body": "{% sort \"sort\" (${value}, ${reverse}, ${case_sensitive}, ${attribute}) %}\n\t\n\n{% endsort%} ",
        "description": "Sort an iterable.",
        "prefix": "|sort"
    },
    "split": {
        "name": "split",
        "body": "{% split \"split\" (${s}, ${separator}, ${limit}) %}\n\t\n\n{% endsplit%} ",
        "description": "Splits the input string into a list on the given separator",
        "prefix": "|split"
    },
    "string": {
        "name": "string",
        "body": "stringfalse",
        "description": "Returns string value of object",
        "prefix": "|string"
    },
    "striptags": {
        "name": "striptags",
        "body": "striptagsfalse",
        "description": "Strip SGML/XML tags and replace adjacent whitespace by one space.",
        "prefix": "|striptags"
    },
    "strtotime": {
        "name": "strtotime",
        "body": "strtotime(${datetimeString}, ${datetimeFormat})",
        "description": "Converts a datetime string and datetime format to a datetime object",
        "prefix": "|strtotime"
    },
    "sum": {
        "name": "sum",
        "body": "sum(${value}, ${attribute}, ${start})",
        "description": "Returns the sum of a sequence of numbers plus the value of parameter ‘start’ (which defaults to 0). When the sequence is empty it returns start.",
        "prefix": "|sum"
    },
    "symmetric_difference": {
        "name": "symmetric_difference",
        "body": "symmetric_difference(${value}, ${list})",
        "description": "Returns a list containing elements present in only one list.",
        "prefix": "|symmetric_difference"
    },
    "title": {
        "name": "title",
        "body": "titlefalse",
        "description": "Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase.",
        "prefix": "|title"
    },
    "tojson": {
        "name": "tojson",
        "body": "tojson(${o})",
        "description": "Writes object as a JSON string",
        "prefix": "|tojson"
    },
    "trim": {
        "name": "trim",
        "body": "trimfalse",
        "description": "Strip leading and trailing whitespace.",
        "prefix": "|trim"
    },
    "truncate": {
        "name": "truncate",
        "body": "truncate(${s}, ${length}, ${killwords}, ${end})",
        "description": "Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255. If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign (\"...\"). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter.",
        "prefix": "|truncate"
    },
    "truncatehtml": {
        "name": "truncatehtml",
        "body": "truncatehtml(${html}, ${length}, ${end}, ${breakword})",
        "description": "Truncates a given string, respecting html markup (i.e. will properly close all nested tags)",
        "prefix": "|truncatehtml"
    },
    "union": {
        "name": "union",
        "body": "union(${value}, ${list})",
        "description": "Returns a list containing elements present in either list",
        "prefix": "|union"
    },
    "unique": {
        "name": "unique",
        "body": "unique(${sequence}, ${attr})",
        "description": "Extract a unique set from a sequence of objects",
        "prefix": "|unique"
    },
    "unixtimestamp": {
        "name": "unixtimestamp",
        "body": "unixtimestamp(${value})",
        "description": "Gets the UNIX timestamp value (in milliseconds) of a date object",
        "prefix": "|unixtimestamp"
    },
    "upper": {
        "name": "upper",
        "body": "upperfalse",
        "description": "Convert a value to uppercase",
        "prefix": "|upper"
    },
    "urlencode": {
        "name": "urlencode",
        "body": "urlencodefalse",
        "description": "Escape strings for use in URLs (uses UTF-8 encoding). It accepts both dictionaries and regular strings as well as pairwise iterables.",
        "prefix": "|urlencode"
    },
    "urlize": {
        "name": "urlize",
        "body": "urlize(${value}, ${trim_url_limit}, ${nofollow}, ${target})",
        "description": "Converts URLs in plain text into clickable links.",
        "prefix": "|urlize"
    },
    "wordcount": {
        "name": "wordcount",
        "body": "wordcountfalse",
        "description": "Counts the words in the given string",
        "prefix": "|wordcount"
    },
    "wordwrap": {
        "name": "wordwrap",
        "body": "wordwrap(${s}, ${width}, ${break_long_words})",
        "description": "Return a copy of the string passed to the filter wrapped after 79 characters.",
        "prefix": "|wordwrap"
    },
    "xmlattr": {
        "name": "xmlattr",
        "body": "xmlattr(${d}, ${autospace})",
        "description": "Create an HTML/XML attribute string based on the items in a dict.",
        "prefix": "|xmlattr"
    }
}